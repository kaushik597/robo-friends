{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundary.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","mail","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","err","info","this","setState","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yOAeeA,G,MAbJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACxB,OACI,yBAAKC,UAAU,yDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACJ,4BAAKF,EAAL,KACA,2BAAIC,OCeWK,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BACIA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACI,kBAAC,EAAD,CAAMC,IAAKD,EACPR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBY,KAAML,EAAOG,GAAGT,aCErBY,EAfG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAE5B,OACA,yBAAKZ,UAAU,OACX,2BAAOA,UAAW,mCAClBa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCHI,EARA,SAACC,GAChB,OACI,yBAAKC,MAAO,CAAEC,SAAS,SAAUC,OAAO,kBAAmBC,OAAO,UACjEJ,EAAMK,WCuBIC,E,YAzBf,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAM,CACPC,UAAS,GAHC,E,+EAQAC,EAAIC,GAElBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKpB,OAAGG,KAAKJ,MAAMC,SACH,oCAGJG,KAAKX,MAAMK,a,GApBEQ,aC8CbC,E,YAvCb,aAAc,IAAD,8BACX,+CAcFC,eAAe,SAACC,GACd,EAAKJ,SAAS,CAAClB,YAAYsB,EAAMC,OAAOC,SAdxC,EAAKX,MAAM,CACTpB,OAAQ,GACRO,YAAc,IAEhByB,QAAQC,IAAI,eAND,E,iFAQO,IAAD,OACfC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAjC,GAAI,OAAE,EAAKuB,SAAS,CAAEzB,OAAOE,OACrC8B,QAAQC,IAAI,e,+BAML,IAAD,EACqBT,KAAKJ,MAAzBpB,EADD,EACCA,OAAOO,EADR,EACQA,YACR+B,EAAetC,EAAOuC,QAAO,SAAAC,GACjC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASnC,EAAYkC,kBAGvD,OADAT,QAAQC,IAAI,UACJjC,EAAO2C,OAEX,yBAAK/C,UAAU,MACb,4CACA,kBAAC,EAAD,CAAWY,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU5B,OAAQsC,OANtB,iD,GA1BUZ,aCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.8a78f35e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card=({name,email,id})=>{\r\nreturn(\r\n    <div className=\" tc bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5\">\r\n    <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}></img>\r\n    <div>\r\n<h2>{name}}</h2>\r\n<p>{email}</p>\r\n    </div>\r\n</div>\r\n)\r\n   \r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport { robots } from '../robots';\r\n\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n   \r\n    return (\r\n        <div>{\r\n            robots.map((user, i) => {\r\n            return (\r\n                <Card key={i}\r\n                    id={robots[i].id}\r\n                    name={robots[i].name}\r\n                    mail={robots[i].email} />\r\n\r\n            )\r\n        })}</div>\r\n\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\r\n    return(\r\n    <div className=\"pa2\">\r\n        <input className= \"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\" \r\n        placeholder=\"search robots\"\r\n        onChange={searchChange} />\r\n        \r\n    </div>\r\n    )\r\n\r\n \r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {  \r\nreturn (\r\n    <div style={{ overflow:'scroll', border:'5px solid black', height:'500px'}}>\r\n    {props.children}\r\n   </div>\r\n);\r\n  \r\n};\r\nexport default Scroll;\r\n","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n        hasError:false\r\n    }\r\n}\r\n\r\n\r\ncomponentDidCatch(err,info)\r\n{\r\n    this.setState({hasError:true})\r\n\r\n}\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>oops</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React ,{Component}from 'react';\nimport './App.css';\nimport CardList from '../component/CardList'\n//import {robots} from './robots'\nimport SearchBox from '../component/SearchBox'\nimport Scroll from '../component/Scroll';\nimport ErrorBoundary from '../component/ErrorBoundary'\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      robots: [],\n      searchfield : ''\n    }\n    console.log(\"constructor\"); \n  }\n  componentDidMount(){\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=>response.json())\n      .then(user=>this.setState({ robots:user}))\n    console.log(\"did mount\");\n  }\n\n  onSearchChange=(event)=>{\n    this.setState({searchfield:event.target.value})\n  }\n  render(){\n    const {robots,searchfield}=this.state;\n    const filteredRobots=robots.filter(robot=>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    console.log('render');\n    return !robots.length?\n        <h1>LOADINggggggg</h1>:\n        <div className='tc'>\n          <h1>Robo friends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n            <CardList robots={filteredRobots}/>  \n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      \n     }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}